Тема: "Система подачи и просмотра резюме на Django MVT, 
React+DRF, с публикацией на oblako.kz"

Бизнес-боль:
* Люди подают свои резюме (на вакансию)
- скидывают на почту, в свободном формате(нет структуры) резюме
- иногда теряются
- к профилю должен быть прикреплён "оценочный лист"
- нужна электронная база с быстрым поиском, фильтрацией, подбор по категориям
- нужна быстрая ссылка для регистрации и прохождения мини-теста
- нужно оцифровать текущую базу клиентов(из excel-файла)
- ...

- B2B
- Нужно построить оценочную модель на базе нейросети, для подбора команд 
в проекты. Психологи создадут тест, на основе этих результатов.

Стек технологий:
- Python(django - наш курс/flask - самый лёгкий/fastapi - самый быстрый/sanic - неполноценный)
- html, css, js (React)

- процедурное (слишком примитивное)
- ооп (расширямое)
- функциональное (слишком строгое)

План и тех.задание(Декомпозиция - разделение крупной задачи на мелкие):
- Какие данные нужны от человека - (фио, иин, дата рождения, место, образование, активно, пол, ...)
- html form | class Resume
- Home, About, Price, Register...


Trello/Jira:
- разложили задачи, выбрали ответственных


Github/Gitlab:
- создать репозиторий
- настроить участникам ssh-ключи
- настроить linter(flake8) / статический анализатор(mypy) / black / tabnine


Ответственность и задачи:
senior - максимально поверхностно(без деталей)
middle - более углубленно, иногда можно разбить на подзадачи(для упрощения)
junior - нужно помочь разбить задачу на более мелкие
intern - нужно помочь разбить задачу на более мелкие

###################################################
Register Page
- Какие данные нужны от человека - (фио, иин, дата рождения, место, образование, активно, пол, ...)
- html form | class Resume

1) MVT(fullstack) / blade
2) clear DRF(backend)
3) React(frontend/fullstack)
4) Публикация

Преимущества Django REST Framework:
1) Удобная панель управления(можно делать Post/Put/Delete прям из неё. 
Нормальный формат просмотра структур данных.)
2) Более быстрая сериализация и валидации.
3) Более стандартный REST - подходит для разработки.


* 
* +Как создать django-проект
* +Как вернуть html-страницу
* +Как использовать на странице свой css / js?
* +Как дизайн выбрать?
* +Как сверстать html-страницу.
* +Как передать данные от html до backend
* +Как получить данные от html
* +Как связать базу данных с Django(+Sqlite / PostgreSQL)
ORM: быстрее разработка, легче, универсальнее(один ORM на все базы данных)
* +Как создать запись в базе данных
* +Как реализовать оповещение в случае успеха/не успеха
* 

- Посмотрели статьи
- Сами погуглили
- Спросили у Chat-Gpt
- Почитать книги






