* умный дом и дашборды(графики, оповещения, уведомления...) в нём это сбор информации с разных источников (android смартфон, windows CE пульсометр, Linux часы и т.д...) в одно место - единый web-backend сервер.
* задача реализовать один из источников данных в полностью асинхронном режиме (asyncio, aiosqlite, aiohttp, aiofiles...)
* В случае ошибок писать в логи с разделением по часам
* в случае отключения веб сервера сохранять мгновенные показатели в временную файловую базу данных, (чтобы не боятся утери и отключения питания) и затем их досылать
* программа должна собираться в .exe, прятаться в трей и автозапуск
* Настройки программы (задержка отправки данных, ip адрес и порт сервера...) должны храниться в JSON файле (чтобы можно было менять параметры не перекомпилируя программу)
* Сами данные пока фейковые-рандомные: пульс человека, водонагреватель, тёплые полы, замок на двери и окнах.

1) Тех.задание и выбор стека
2) Планирование, схемы взаимодействия
3) Базовые блоки в режиме MVP, Базовый каркас MVP
4) Рефакторинг(async, OOP...)

логин+
графики, дашборд, таблица, уведомления...

npm i  // установка всех зависимостей
npx create-react-app frontend --template redux-typescript
npx create-react-app my-app --template cra-template-pwa
npx create-react-app my-app --template router-dom



/api/communicator POST

-> JSON
- api: swagger(автодокументация). GET - response, query_param. POST - response, body.
- автотесты
- докер (виртуализация vs контейнеризация)

пульсометр на WinCE, мигать экраном на фронтенд если пульс человека стал ниже нормы
