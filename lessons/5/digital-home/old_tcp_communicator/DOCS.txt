OSI - 7 уровне, от физического(интернет кабель и до уровня приложения).

IP - v4/v6
TCP(+40%) - протокол, который создаёт "соединение". "Досылает" пакеты, которые были потеряны.
UDP(ИБ) - просто посылает данные в "одну сторону".

REST/api - request-response (от 1 до 60s)
Websocket - long request-response (от 1 до 3600s)
SOAP(legacy)
grps(modern google...)

------------------------------------------------------

Ряд устройств
- умное зеркало
- умная лампочка
- водонагреватель
- ...

Локальный сервер
- собирает с локальных устройств и посылает на сервер

Message:
id:
datetime:
message: {value: "+20"...}

* (while True - 3) worker1: берём с устройства и кладёт в очередь сообщений(). БД sqlite.
* (while True - 5) worker2: берёт с БД и отсылает на сервер. Нужны логи, имя лога должно 
быть по часам. За раз посылать первые 10 записей.

Сервер сбора информации
- логи
* tcp/http/REST
* JSONS -> DB


~ 150-200 Python
- автозагрузка
- нужно стартовать в трее + все его кнопки
- нужен UI, который будет показывать статус отправки
- логи



* умный дом и дашборды(графики, оповещения, уведомления...) в нём это сбор информации с разных источников (android смартфон, windows CE пульсометр, Linux часы и т.д...) в одно место - единый web-backend сервер.
* 2 бесконечных потока: один из датчика берёт и ложит в локальную базу, второй берёт из базы и отправляет на backend(удаляет из базы).
* задача реализовать один из источников данных в полностью асинхронном режиме (asyncio, aiosqlite, aiohttp, aiofiles...)
* В случае ошибок писать в логи с разделением по часам
* в случае отключения веб сервера сохранять мгновенные показатели в временную файловую базу данных, (чтобы не боятся утери и отключения питания) и затем их досылать
* программа должна собираться в .exe, прятаться в трей и автозапуск
* Настройки программы (задержка отправки данных, ip адрес и порт сервера...) должны храниться в JSON файле (чтобы можно было менять параметры не перекомпилируя программу)
* Сами данные пока фейковые-рандомные, пульс человека.




